package util

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
)

//will use os/exec.LookPath
var helmBin = "helm"

type helmCommand struct {
	helmBin     string
	destination string
	logger      *Logger
}

func (h *helmCommand) doInit() {
	params := []string{
		"init",
		"-c",
	}

	//run helm command
	stdout, stderr, err := h.runCommand(params)
	h.logger.Debug.Print(stdout)
	if stderr != "" {
		h.logger.Err.Print(stderr)
	}

	if err != nil {
		h.logger.Err.Print(err)
	}
}

func (h *helmCommand) generateIndex(url string) *FileStat {
	params := []string{
		"repo",
		"index",
		"--url",
		url,
		h.destination,
	}

	//run helm command
	stdout, stderr, err := h.runCommand(params)
	h.logger.Debug.Print(stdout)
	if stderr != "" {
		h.logger.Err.Print(stderr)
	}

	if err != nil {
		return &FileStat{
			Err: err,
		}
	}
	return getGeneratedFile(stdout, stderr, "index.yaml", h.destination)
}

func (h *helmCommand) packageChart(path string) *FileStat {
	params := []string{
		"package",
		"-d",
		h.destination,
		path,
	}

	//run helm command
	stdout, stderr, err := h.runCommand(params)
	h.logger.Debug.Print(stdout)
	if stderr != "" {
		h.logger.Err.Print(stderr)
	}

	if err != nil {
		return &FileStat{
			Err: err,
		}
	}

	//get generated package using a glob on the destination dir
	return getGeneratedFile(stdout, stderr, filepath.Base(path), h.destination)
}

func getGeneratedFile(stdout, stderr, fileNamePart, dir string) *FileStat {
	//get generated package using a glob on the destination dir
	pattern := fmt.Sprintf("%s*", fileNamePart)
	packages, err := filepath.Glob(filepath.Join(dir, pattern))
	if err != nil {
		return &FileStat{
			Err: err,
		}
	}
	if len(packages) != 1 {
		return &FileStat{
			Err: fmt.Errorf("failed to get file %q generated by helm. Found: %v. Logs: \n%s\nErr: %s", fileNamePart, packages, stdout, stderr),
		}
	}
	stat, err := os.Stat(packages[0])
	if err != nil {
		return &FileStat{
			Err: err,
		}
	}
	absPath, err := filepath.Abs(packages[0])
	if err != nil {
		return &FileStat{
			Err: err,
		}
	}
	return &FileStat{
		Name:    filepath.Base(stat.Name()),
		Dir:     dir,
		Path:    absPath,
		ModTime: stat.ModTime(),
		Size:    stat.Size(),
	}
}

func (h *helmCommand) runCommand(params []string) (stdout string, stderr string, err error) {
	cmd := new(exec.Cmd)
	cmd = exec.Command(h.helmBin, params...)

	var outbuf, errbuf bytes.Buffer
	cmd.Stdout = &outbuf
	cmd.Stderr = &errbuf

	err = cmd.Run()
	stdout = outbuf.String()
	stderr = errbuf.String()
	return
}
